
%{
%}

%token  
   INPUT OUTPUT VOLATILE NAME IF ELIF ELSE ENDIF
   TRUE FALSE LESS_EQUAL GREATER_EQUAL 
   EQUAL_EQUAL NOT_EQUAL FLOAT INTEGER BOOL 
   MIXER 

%%

Mixer :
   Stmts  MixerImpl
;

Stmts:
   Stmt
  | Stmts Stmt
;

Stmt:
 ModifiedName '=' RValue ';'
 | OUTPUT '[' Expr ']' '='  Expr ';'
 /* note IF is overloaded also as a function */
 | IF '(' Expr ')' Stmts  IfContinuation
;

ModifiedName:
  NAME
| VOLATILE NAME
;

RValue:
   Expr 
|  CurveDefinition 
;

IfContinuation:
  ELIF '(' Expr ')'  Stmts  IfContinuation
| ELSE '(' Expr ')'  Stmts  ENDIF
| ENDIF
;

CurveDefinition:
   CurveElement
 |  CurveDefinition ',' CurveElement 
;

CurveElement:
 '[' Expr ',' Expr ']'
;

Expr:
   OrExpr
;

Primary :
   Literal
|  NameOrFunction
|  IOExpr
|  '+' Primary
|  '-' Primary
|  '!' Primary
|  '(' Expr ')'
;

IOExpr:
   INPUT '{' NAME '}'
   INPUT '[' Expr ']'
|  OUTPUT '[' Expr ']'
;

NameOrFunction:
   NAME
|  NAME '(' ExprList ')'
/* note: IF is overloaded */
|  IF   '(' ExprList ')'
;

MulExpr:
   Primary
|  MulExpr '*' Primary
|  MulExpr '/' Primary
;

AddExpr:
   MulExpr
|  AddExpr '+' MulExpr
|  AddExpr '-' MulExpr
;

RelationalExpr:
   AddExpr
|  RelationalExpr RelationalOp AddExpr
;

AndExpr:
   RelationalExpr
|  AndExpr '&' RelationalExpr

OrExpr:
   AndExpr
|  OrExpr '|' AndExpr
;

Literal : 
    NumericLiteral
 |  BoolLiteral
;

NumericLiteral:
     FLOAT
 |  INTEGER
;

BoolLiteral:
   TRUE
|   FALSE
;

RelationalOp:
   '>'
|   '<'
|  LESS_EQUAL 
|  GREATER_EQUAL 
|  EQUAL_EQUAL 
|  NOT_EQUAL
;

ExprList :
   Expr
|  ExprList ',' Expr
;

MixerImpl :
   MIXER '{' Stmts '}'
;

%%

