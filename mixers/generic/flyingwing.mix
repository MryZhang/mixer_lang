
# A flying wing mixer, but with throw adjusted by airspeed
# In practise it is a good idea to be able to switch that off
# in case the sensor fails
# so only use airspeed to adjust control throw if not in failsafe mode

pitch_gain = 500.0; 
roll_gain = 1000.0 - pitch_gain;
throttle_gain = 500.0;
pulse_offset = 1500.0;
thrt_pls_offset = 1500.0;

# The output channels are addressed by index ( 0 to .. N) , but
# optionally symbolic constant names can be used
# for legibility as here
elevon_left   = 0;   
elevon_right  = 1;
throttle      = 2;

#false to turn off airspeed mixing
#could also be a mode like expo mode or a parameter
aspd_mix_on = true;

# The mixer is evaluated periodically
# The mixer update rate could be an eeprom parameter

mixer()
{   
   # How the deflection of a control surface affects the angular acceleration
   # of the aircraft depends on airspeed ^2, so reduce the throw proportionaly
   # as airspeed increases.
   # Make sure that the airspeed is capped if it goes below min airspeed 
   # ,(the eeprom parameter ARSPD_MIN) to avoid huge throws at low airspeed
   # and on the ground and to avoid division by zero.
   # Also only use if not in failsafe, else just use cruise airspeed

   # use airspeed for mixing?
   use_aspd_mix = aspd_mix_on & (input{FAILSAFE_ON} == false);

   #limit range of useful airspeed
   # TODO constrain function
   constrain_aspd 
      = if(use_aspd_mix,
            min(max(input{Airspeed},input{ARSPD_MIN}),input{ARSPD_MAX}),
            input{ARSPD_CRUISE}
        );

   # control surface gain
   csfc_gain = ( input{ARSPD_MIN} * input{ARSPD_MIN})/(constrain_aspd * constrain_aspd) ;
 
   pitch = input{Pitch} * pitch_gain;
   roll  = input{Roll} * roll_gain;

   # The output expressions
   output[elevon_left] = ( pitch + roll) * csfc_gain + pulse_offset;
   output[elevon_right] = (pitch - roll) * csfc_gain + pulse_offset;

   output[throttle] = input{Throttle} * throttle_gain + thrt_pls_offset;

}

